{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0}],"Cache":[{"_id":"source/_posts/2012-03-07-helloworld.md","shasum":"f3b199ccec8d7fb5898536cddaa8c168db4e1599","modified":1456608351000},{"_id":"source/_posts/2012-03-18-disqus-on-github.md","shasum":"13cf3348b096f9c820b1060b1a3e1abcfef38892","modified":1456608550000},{"_id":"source/_posts/2012-03-18-disqus-on-github.md~","shasum":"964daea9385d283953dc33cc9fd6b73bc47f9b6f","modified":1456608277000},{"_id":"source/_posts/2012-04-05-finding-node-modules.md","shasum":"01124c12f401388a8f422faff407eccd6f39e8d3","modified":1456608377000},{"_id":"source/_posts/2012-07-25-client-ssl-auth.md","shasum":"dbe252063d94fa64110a927abce588cdbc8933e9","modified":1456608397000},{"_id":"source/_posts/2013-02-14-secure-postgres-replication.md","shasum":"df6205efeddfea68a09cc84df59759b85cca9c71","modified":1456608502000},{"_id":"source/_posts/2012-12-28-ssh-agent-forwarding.md","shasum":"b4e97183fca0854713a1f75e7d0731b1648a613e","modified":1456608420000},{"_id":"source/_posts/2013-02-14-secure-postgres-replication.md~","shasum":"7dcfc29a55bf3f1c2efc1d022f1727fa31b44471","modified":1456608367000},{"_id":"source/_posts/2016-02-27-Blogging-again.md","shasum":"43f550648e2f8e8560c90148654de3e7440f0c02","modified":1456609134000},{"_id":"source/_posts/2016-02-27-Buh-bye-Jekyll-Hello-Hexo.md","shasum":"4018c2ea27d9f9a97bedc6596457e06007cedb41","modified":1456609387000},{"_id":"source/_posts/2016-02-27-Buh-bye-Jekyll-Hello-Hexo.md~","shasum":"b5b908a7ab6d2a1dc42c784cbf9cff5ef823726b","modified":1456609362000},{"_id":"source/_posts/2016-02-27-Blogging-again.md~","shasum":"de764e889eadca4253d6ce869906b3d75e494263","modified":1456609044000},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1456608277000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1456608277000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1456608277000},{"_id":"themes/landscape/_config.yml","shasum":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1456608277000},{"_id":"themes/landscape/languages/default.yml","shasum":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1456608277000},{"_id":"themes/landscape/languages/nl.yml","shasum":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1456608277000},{"_id":"themes/landscape/languages/no.yml","shasum":"965a171e70347215ec726952e63f5b47930931ef","modified":1456608277000},{"_id":"themes/landscape/languages/ru.yml","shasum":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1456608277000},{"_id":"themes/landscape/languages/zh-CN.yml","shasum":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1456608277000},{"_id":"themes/landscape/languages/zh-TW.yml","shasum":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"931aaaffa0910a48199388ede576184ff15793ee","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"16a904de7bceccbb36b4267565f2215704db2880","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1456608277000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1456608277000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1456608277000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1456608277000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1456608277000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1456608277000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1456608277000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1456608277000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1456608277000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1456608277000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1456608277000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456608277000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1456608277000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456608277000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1456608277000},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1456608277000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1456608277000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1456608277000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1456608277000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1456608277000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1456608277000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1456608277000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1456608277000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1456608277000},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1456608277000},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1456608277000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1456608277000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1456608277000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1456608277000},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1456608277000}],"Category":[{"name":"blog","_id":"cil5nk7mn0001otuf2ax2qjhq"}],"Data":[],"Page":[],"Post":[{"date":"2012-03-07T05:00:00.000Z","layout":"post","title":"Hello World!","_content":"\nHello World!","source":"_posts/2012-03-07-helloworld.md","raw":"---\ndate: 2012-03-07\nlayout: post\ntitle: Hello World!\ncategories:\n- blog\n---\n\nHello World!","slug":"helloworld","published":1,"updated":"2016-02-27T21:25:51.000Z","comments":1,"photos":[],"link":"","_id":"cil5nk7mh0000otuf086gn15o"},{"title":"Buh-bye Jekyll, Hello Hexo","date":"2016-02-27T21:38:31.000Z","_content":"\n### Buh-bye Jekyll\n\nI tried to get Jekyll working again after 3 years on inactivity. It was painful enough that I said eff it.  My tolerance for Ruby related pain is extremely low these days.\n\n### Hello Hexo\n\nSince we use a lot of Node.js at Kash, I decided to switch to Hexo. It seems to be a polished Jekyll clone. Really the most important thing for me to keep my actual content in markdown. I expect to move again, and markdown does the job. \n\n","source":"_posts/2016-02-27-Buh-bye-Jekyll-Hello-Hexo.md","raw":"---\ntitle: 'Buh-bye Jekyll, Hello Hexo'\ndate: 2016-02-27 16:38:31\ntags:\n---\n\n### Buh-bye Jekyll\n\nI tried to get Jekyll working again after 3 years on inactivity. It was painful enough that I said eff it.  My tolerance for Ruby related pain is extremely low these days.\n\n### Hello Hexo\n\nSince we use a lot of Node.js at Kash, I decided to switch to Hexo. It seems to be a polished Jekyll clone. Really the most important thing for me to keep my actual content in markdown. I expect to move again, and markdown does the job. \n\n","slug":"Buh-bye-Jekyll-Hello-Hexo","published":1,"updated":"2016-02-27T21:43:07.000Z","_id":"cil5nk7ms0003otufd34aau6g","comments":1,"layout":"post","photos":[],"link":""},{"title":"Blogging again","date":"2016-02-27T21:29:48.000Z","_content":"\nWhile [Kash](http://withkash.com) is keeping me insanely busy, I to start blogging again. I'm going to try to write once a week but keep it very MVBP (Minimum Viable Blog Post) ;)\n\n\n","source":"_posts/2016-02-27-Blogging-again.md","raw":"---\ntitle: Blogging again\ndate: 2016-02-27 16:29:48\ntags:\n---\n\nWhile [Kash](http://withkash.com) is keeping me insanely busy, I to start blogging again. I'm going to try to write once a week but keep it very MVBP (Minimum Viable Blog Post) ;)\n\n\n","slug":"Blogging-again","published":1,"updated":"2016-02-27T21:38:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cil5nk7mz0004otuf4ywbs5ap"},{"date":"2013-02-14T05:00:00.000Z","layout":"post","title":"Secure Replication With Postgres 9.1","_content":"\nHaving been the MySQL DBA-By-Default (DBA-B-D) in another life, I've must to admit to being much happier with postgres despite what I consider to be documentation holes. As a DBA-B-D (aka DevOps, aka Co-Founder), I find postgres lacking concise up-to-date documentation for getting specific tasks done quickly,  or howtos. Replication is one such task. I had to merge bits and pieces from a number of sources, including mailing list posts,  together in order to get what I wanted. I'm not complaining though, rather this my contribution to improving this situation. \n\n# Why Secure Replication\n\nThe Cloud, aka outsourced VPS hosting with an API. Most of the documentation seems to expect you to be running this in our private secure network partitioned data center. \n\n# High Level Overview\n\nTODO\n\n# Get Yourself A Cert\n\nYou'll probably want to generate one yourself. THere's not much point paying for a new one since you can easily distribute your own CA cert. Google it, there's lot of info out there.\n\n\n# On The Master\n\nUpdate the postgres.conf on your master to enable WAL support for replication:\n<p>\n<pre>\nwal_level = hot_standby\nmax_wal_senders = 3\n</pre>\n</p>\n\nAdd the following to authorize the client to replicate against the db. Note that we're only authorizing an SSL connection from replication user on all databases from $SLAVE_IP with password based authentication (md5).\n\n<p>\n<pre>\nhostssl replication all $SLAVE_IP/32    md5\n</pre>\n</p>\n\nNote: You'll need to restart your postgres server for the wal related setting to take affect now.\n\nThe Postgres data dir for Ubuntu 12-04 is in /var/lib/postgresql/9.1/main\n\nYou'll need an SSL key and cert and root cert (CA). You can generate your own CA and self signed cert if you want as well. To do so see the Keys and Certs section of \n[this article](http://gflarity.github.com/2012/07/25/client-ssl-auth/).\n\n# On The Slave\n\nIf postgres is running on the SLAVE, bring it down. You're going to wipe out whatever is there and create a backup from the master. \n\nSwitch to postgres user from here on. \n\nFirst, delete the the contents of $PG_DATA ( /var/lib/postgresql/9.1/main/ on Ubuntu/Debian ).\n\n<p>\n<pre>\nsudo su - postgres\nrm -rf /var/lib/postgresql/9.1/main/\n</pre>\n</p>\n\n\nNow use pg_basebackup to create the backup we're going to start replicaiton from. You'll be prompted for the postgres user password ($PG_PASS).\n\n<p>\n<pre>\npg_basebackup -D /var/lib/postgresql/9.1/main/ -x -h $MASTER_IP\n</pre>\n</p>\n\n\nAs *root*, create links to the certs, including your CA/root cert.\n\n<p>\n<pre>\nsudo su\ncd /var/lib/postgresql/9.1/main/\nln -s /etc/ssl/certs/yourcert.crt server.crt\nln -s /etc/ssl/private/yourkey.key server.key\nln -s /etc/ssl/certs/root.crt root.cert\n</pre>\n</p>\n\n\nOnce complete, create a file called recovery.conf with the following contents inside your postgres data dir on the slave. \n<p>\n<pre>\nstandby_mode = 'on'\n# 'touch' the file below to initiate fail over ( break replication, become read-write )\ntrigger_file = '$PG_DATA/failover'\nprimary_conninfo='host=$MASTER_IP port=5432 sslmode=verify-ca password=$PG_PASS'\n</pre>\n</p>\n\nAdd the followng to the postgres.conf file:\n<p/>\n<pre>\nhot_standby = on\n</pre>\n</p>\n\nLink to the root cert used to verify the master:\n<p>\n<pre>\nln -s /etc/ssl/\n</pre>\n</p>\n\n\nStart postgres and tail the log, you should see replication starting. On Ubuntu:\n<p>\n<pre>\nservice postgres start\ntail -f /var/log/postgresql/postgresql-9.1-main.log\n</pre>\n</p>\n\n\n\n\n","source":"_posts/2013-02-14-secure-postgres-replication.md","raw":"---\ndate: 2013-02-14\nlayout: post\ntitle: Secure Replication With Postgres 9.1\ncategories:\n- blog\n---\n\nHaving been the MySQL DBA-By-Default (DBA-B-D) in another life, I've must to admit to being much happier with postgres despite what I consider to be documentation holes. As a DBA-B-D (aka DevOps, aka Co-Founder), I find postgres lacking concise up-to-date documentation for getting specific tasks done quickly,  or howtos. Replication is one such task. I had to merge bits and pieces from a number of sources, including mailing list posts,  together in order to get what I wanted. I'm not complaining though, rather this my contribution to improving this situation. \n\n# Why Secure Replication\n\nThe Cloud, aka outsourced VPS hosting with an API. Most of the documentation seems to expect you to be running this in our private secure network partitioned data center. \n\n# High Level Overview\n\nTODO\n\n# Get Yourself A Cert\n\nYou'll probably want to generate one yourself. THere's not much point paying for a new one since you can easily distribute your own CA cert. Google it, there's lot of info out there.\n\n\n# On The Master\n\nUpdate the postgres.conf on your master to enable WAL support for replication:\n<p>\n<pre>\nwal_level = hot_standby\nmax_wal_senders = 3\n</pre>\n</p>\n\nAdd the following to authorize the client to replicate against the db. Note that we're only authorizing an SSL connection from replication user on all databases from $SLAVE_IP with password based authentication (md5).\n\n<p>\n<pre>\nhostssl replication all $SLAVE_IP/32    md5\n</pre>\n</p>\n\nNote: You'll need to restart your postgres server for the wal related setting to take affect now.\n\nThe Postgres data dir for Ubuntu 12-04 is in /var/lib/postgresql/9.1/main\n\nYou'll need an SSL key and cert and root cert (CA). You can generate your own CA and self signed cert if you want as well. To do so see the Keys and Certs section of \n[this article](http://gflarity.github.com/2012/07/25/client-ssl-auth/).\n\n# On The Slave\n\nIf postgres is running on the SLAVE, bring it down. You're going to wipe out whatever is there and create a backup from the master. \n\nSwitch to postgres user from here on. \n\nFirst, delete the the contents of $PG_DATA ( /var/lib/postgresql/9.1/main/ on Ubuntu/Debian ).\n\n<p>\n<pre>\nsudo su - postgres\nrm -rf /var/lib/postgresql/9.1/main/\n</pre>\n</p>\n\n\nNow use pg_basebackup to create the backup we're going to start replicaiton from. You'll be prompted for the postgres user password ($PG_PASS).\n\n<p>\n<pre>\npg_basebackup -D /var/lib/postgresql/9.1/main/ -x -h $MASTER_IP\n</pre>\n</p>\n\n\nAs *root*, create links to the certs, including your CA/root cert.\n\n<p>\n<pre>\nsudo su\ncd /var/lib/postgresql/9.1/main/\nln -s /etc/ssl/certs/yourcert.crt server.crt\nln -s /etc/ssl/private/yourkey.key server.key\nln -s /etc/ssl/certs/root.crt root.cert\n</pre>\n</p>\n\n\nOnce complete, create a file called recovery.conf with the following contents inside your postgres data dir on the slave. \n<p>\n<pre>\nstandby_mode = 'on'\n# 'touch' the file below to initiate fail over ( break replication, become read-write )\ntrigger_file = '$PG_DATA/failover'\nprimary_conninfo='host=$MASTER_IP port=5432 sslmode=verify-ca password=$PG_PASS'\n</pre>\n</p>\n\nAdd the followng to the postgres.conf file:\n<p/>\n<pre>\nhot_standby = on\n</pre>\n</p>\n\nLink to the root cert used to verify the master:\n<p>\n<pre>\nln -s /etc/ssl/\n</pre>\n</p>\n\n\nStart postgres and tail the log, you should see replication starting. On Ubuntu:\n<p>\n<pre>\nservice postgres start\ntail -f /var/log/postgresql/postgresql-9.1-main.log\n</pre>\n</p>\n\n\n\n\n","slug":"secure-postgres-replication","published":1,"updated":"2016-02-27T21:28:22.000Z","comments":1,"photos":[],"link":"","_id":"cil5nk7n10005otufza8bgp6c"},{"date":"2012-12-28T05:00:00.000Z","layout":"post","title":"SSH Agent Forwarding","_content":"\nI was having some issues getting my SSH Agent to forward. Turns out my understanding was completely inadequate. Here's a quick run through for anyone else who might benefit.\n\n# High Level Concept\n\nSay you have hosts A B C and you want to connect like so: A->B->C. SSH allows you forward your 'Agent' such that your credentials for host A can be used on on host C as if B wasn't even involved. It does so by forwarding a unix domain socket provided by A's agent to B (usually in /tmp/ssh-??) when you connect from A->B. Then when you connect B->C instead of C interacting with B's agent, it interacts with the forwarded Agent provided by A. \n\n# Configuration\n\n   - Make sure 'AllowAgentForwarding no' is *not* set it in /etc/ssh/sshd_config on B (it defaults to yes if it's not explicitly set to no).\n   - Make sure your client config has 'ForwardAgent yes', you'll likely want to do this which specific hosts you trust/control, as a program on B will able to login as you (only while you're connected) if it wants. Edit ~/.ssh/config and add something similar to the following:\n<pre>\nHost examplehost.com\n  ForwardAgent yes\n</pre>\n<p></p>\n   - Tell your ssh-agent on A that you want make an identity available through it. Run the follow from a terminal:\n<pre>\nssh-add\n</pre>\n<p></p>\nThat's it. You should be able to login to C from B using your credentials securely stored on A. \n\n\n","source":"_posts/2012-12-28-ssh-agent-forwarding.md","raw":"---\ndate: 2012-12-28\nlayout: post\ntitle: SSH Agent Forwarding\ncategories:\n- blog\n---\n\nI was having some issues getting my SSH Agent to forward. Turns out my understanding was completely inadequate. Here's a quick run through for anyone else who might benefit.\n\n# High Level Concept\n\nSay you have hosts A B C and you want to connect like so: A->B->C. SSH allows you forward your 'Agent' such that your credentials for host A can be used on on host C as if B wasn't even involved. It does so by forwarding a unix domain socket provided by A's agent to B (usually in /tmp/ssh-??) when you connect from A->B. Then when you connect B->C instead of C interacting with B's agent, it interacts with the forwarded Agent provided by A. \n\n# Configuration\n\n   - Make sure 'AllowAgentForwarding no' is *not* set it in /etc/ssh/sshd_config on B (it defaults to yes if it's not explicitly set to no).\n   - Make sure your client config has 'ForwardAgent yes', you'll likely want to do this which specific hosts you trust/control, as a program on B will able to login as you (only while you're connected) if it wants. Edit ~/.ssh/config and add something similar to the following:\n<pre>\nHost examplehost.com\n  ForwardAgent yes\n</pre>\n<p></p>\n   - Tell your ssh-agent on A that you want make an identity available through it. Run the follow from a terminal:\n<pre>\nssh-add\n</pre>\n<p></p>\nThat's it. You should be able to login to C from B using your credentials securely stored on A. \n\n\n","slug":"ssh-agent-forwarding","published":1,"updated":"2016-02-27T21:27:00.000Z","comments":1,"photos":[],"link":"","_id":"cil5nk7n40007otufycxg385o"},{"date":"2012-07-25T04:00:00.000Z","layout":"post","title":"Client SSL Auth","_content":"\nThe HTTPS system allows you to communicate securely with a server and trust it's idenity. This is how it's generally used. However it's also possible for the server to trust the identity of the client as well. \n\nIt's fairly straight forward to take advantage of this with Node.js, below you will find a simple tutorial for doing just that.\n\n# Keys and Certs\n\nFirst, you're going to need all your certs and keys. Follow along with the instructions below to do so. It's adapted from [this](http://blog.nategood.com/client-side-certificate-authentication-in-ngi) article. \n\nNotice the '365'. If you want your keys to valide for longer than a year, change this. \n\n<pre><code>\n# Create the CA Key and Certificate for signing Client Certs\nopenssl genrsa -des3 -out ca.key 4096\nopenssl req -new -x509 -days 365 -key ca.key -out ca.crt\n\n# Create the Server Key, CSR (the signing request the CA is given)\nopenssl genrsa -des3 -out server.key 1024\nopenssl req -new -key server.key -out server.csr\n\n# You likely want a server key without a passphrase (put the passphrase protected one in your private git repo)\nopenssl rsa -in server.key -out server.key.pem \n\n# We're self signing our own server cert here.  This is a no-no in production.\nopenssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt\n\n# Create the Client Key and CSR\nopenssl genrsa -des3 -out client.key 1024\nopenssl req -new -key client.key -out client.csr\n\n# You likely want a client key without a passphrase for deployment (put the passphrase protected one in your private git repo)\nopenssl rsa -in client.key -out client.key.pem \n\n# Sign the client certificate with our CA cert.  Unlike signing our own server cert, this is what we want to do.\nopenssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out client.crt`\n</code></pre>\n\n<p></p>\n\n# Server:\n\n<pre><code>\nvar https = require('https');\nvar fs = require('fs');\n\nvar options = {\n    key: fs.readFileSync('server.key.pem'),\n    cert: fs.readFileSync('server.crt'),\n\n    //for client certs, this validates the client                                                                                                                                                           \n    ca : [ fs.readFileSync('ca.crt') ],\n    requestCert : true,\n    rejectUnauthorized: true\n};\n\nhttps.createServer(options, function (req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\\n\");\n}).listen(4443);\n</code></pre>\n\n<p></p>\n# Client:\n\n<pre><code>\nvar https = require('https');\nvar fs = require('fs');\n\nvar options = {\n    host: 'localhost',\n    port: 4443,\n    path: '/',\n    method: 'GET',\n    key: fs.readFileSync('client.key.pem'),\n    cert: fs.readFileSync('client.crt'),\n    ca : [ fs.readFileSync('ca.crt') ],\n    requestCert : true,\n    rejectUnauthorized: true\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, function(res) {\n\n    console.log('STATUS: ' + res.statusCode);\n    console.log('HEADERS: ' + JSON.stringify(res.headers));\n    res.setEncoding('utf8');\n    res.on('data', function (chunk) {\n        console.log('BODY: ' + chunk);\n    });\n} );\n\nreq.end();\n</code></pre>\n<P>\n\n","source":"_posts/2012-07-25-client-ssl-auth.md","raw":"---\ndate: 2012-07-25\nlayout: post\ntitle: Client SSL Auth\ncategories:\n- blog\n---\n\nThe HTTPS system allows you to communicate securely with a server and trust it's idenity. This is how it's generally used. However it's also possible for the server to trust the identity of the client as well. \n\nIt's fairly straight forward to take advantage of this with Node.js, below you will find a simple tutorial for doing just that.\n\n# Keys and Certs\n\nFirst, you're going to need all your certs and keys. Follow along with the instructions below to do so. It's adapted from [this](http://blog.nategood.com/client-side-certificate-authentication-in-ngi) article. \n\nNotice the '365'. If you want your keys to valide for longer than a year, change this. \n\n<pre><code>\n# Create the CA Key and Certificate for signing Client Certs\nopenssl genrsa -des3 -out ca.key 4096\nopenssl req -new -x509 -days 365 -key ca.key -out ca.crt\n\n# Create the Server Key, CSR (the signing request the CA is given)\nopenssl genrsa -des3 -out server.key 1024\nopenssl req -new -key server.key -out server.csr\n\n# You likely want a server key without a passphrase (put the passphrase protected one in your private git repo)\nopenssl rsa -in server.key -out server.key.pem \n\n# We're self signing our own server cert here.  This is a no-no in production.\nopenssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt\n\n# Create the Client Key and CSR\nopenssl genrsa -des3 -out client.key 1024\nopenssl req -new -key client.key -out client.csr\n\n# You likely want a client key without a passphrase for deployment (put the passphrase protected one in your private git repo)\nopenssl rsa -in client.key -out client.key.pem \n\n# Sign the client certificate with our CA cert.  Unlike signing our own server cert, this is what we want to do.\nopenssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out client.crt`\n</code></pre>\n\n<p></p>\n\n# Server:\n\n<pre><code>\nvar https = require('https');\nvar fs = require('fs');\n\nvar options = {\n    key: fs.readFileSync('server.key.pem'),\n    cert: fs.readFileSync('server.crt'),\n\n    //for client certs, this validates the client                                                                                                                                                           \n    ca : [ fs.readFileSync('ca.crt') ],\n    requestCert : true,\n    rejectUnauthorized: true\n};\n\nhttps.createServer(options, function (req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\\n\");\n}).listen(4443);\n</code></pre>\n\n<p></p>\n# Client:\n\n<pre><code>\nvar https = require('https');\nvar fs = require('fs');\n\nvar options = {\n    host: 'localhost',\n    port: 4443,\n    path: '/',\n    method: 'GET',\n    key: fs.readFileSync('client.key.pem'),\n    cert: fs.readFileSync('client.crt'),\n    ca : [ fs.readFileSync('ca.crt') ],\n    requestCert : true,\n    rejectUnauthorized: true\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, function(res) {\n\n    console.log('STATUS: ' + res.statusCode);\n    console.log('HEADERS: ' + JSON.stringify(res.headers));\n    res.setEncoding('utf8');\n    res.on('data', function (chunk) {\n        console.log('BODY: ' + chunk);\n    });\n} );\n\nreq.end();\n</code></pre>\n<P>\n\n","slug":"client-ssl-auth","published":1,"updated":"2016-02-27T21:26:37.000Z","comments":1,"photos":[],"link":"","_id":"cil5nk7n60009otuf5dtf7214"},{"date":"2012-04-05T04:00:00.000Z","layout":"post","title":"Finding Quality Node Modules","_content":"\nLast night we had a great second Node.js Toronto meetup. There was some frustration directed towards the problem knowing which modules are of high quality. This is an acknowledged pain point in the node.js community but it'll get better soon.\n\nIt's worth noting this problem has been discussed a couple times by the current node Project Manager [isaacs](https://github.com/isaacs) on the [NodeUp](http:///nodeup.com)* podcast, though I'm not exactly sure which. Apparently they're working a new version of [npm](http://npmjs.org) website right now. \n\nIn the meantime, finding quality node modules isn't all that hard. With a bit of experience you'll start to recognize names and learn to judge module quality quite quickly. Here's some tips:\n\n\n- the following gives you the most depended on modules [http://search.npmjs.org/#/_browse/deps](http://search.npmjs.org/#/_browse/deps)\n- take a look at this list first\n- take note of the names of these authors\n- you'll notice certain people or organizations publish a lot (substack and NodeJitsu for instance )\n- also take a look at the modules wiki at https://github.com/joyent/node/wiki/modules\n- otherwise search http://search.npmjs.org/\n- visit the github page for the module, it's usually next to the name\n- there's no real excuse not to have a github page (or google code I supposed), I avoid these modules\n- look for a clean well written README\n- if someone really wants you to use their module they'll make it easy to do so with a synopsis/quick start/tutorial\n- does the module have watchers?\n- tests?\n- how does the code look?\n- are there alternatives?\n- how hard is to write your own?\n\n\\* The NodeUp podcast is great. I highly recommend it.\n","source":"_posts/2012-04-05-finding-node-modules.md","raw":"---\ndate: 2012-04-05\nlayout: post\ntitle: Finding Quality Node Modules\ncategories:\n- blog\n---\n\nLast night we had a great second Node.js Toronto meetup. There was some frustration directed towards the problem knowing which modules are of high quality. This is an acknowledged pain point in the node.js community but it'll get better soon.\n\nIt's worth noting this problem has been discussed a couple times by the current node Project Manager [isaacs](https://github.com/isaacs) on the [NodeUp](http:///nodeup.com)* podcast, though I'm not exactly sure which. Apparently they're working a new version of [npm](http://npmjs.org) website right now. \n\nIn the meantime, finding quality node modules isn't all that hard. With a bit of experience you'll start to recognize names and learn to judge module quality quite quickly. Here's some tips:\n\n\n- the following gives you the most depended on modules [http://search.npmjs.org/#/_browse/deps](http://search.npmjs.org/#/_browse/deps)\n- take a look at this list first\n- take note of the names of these authors\n- you'll notice certain people or organizations publish a lot (substack and NodeJitsu for instance )\n- also take a look at the modules wiki at https://github.com/joyent/node/wiki/modules\n- otherwise search http://search.npmjs.org/\n- visit the github page for the module, it's usually next to the name\n- there's no real excuse not to have a github page (or google code I supposed), I avoid these modules\n- look for a clean well written README\n- if someone really wants you to use their module they'll make it easy to do so with a synopsis/quick start/tutorial\n- does the module have watchers?\n- tests?\n- how does the code look?\n- are there alternatives?\n- how hard is to write your own?\n\n\\* The NodeUp podcast is great. I highly recommend it.\n","slug":"finding-node-modules","published":1,"updated":"2016-02-27T21:26:17.000Z","comments":1,"photos":[],"link":"","_id":"cil5nk7n7000botuf9oitr0iv"},{"date":"2012-03-18T04:00:00.000Z","layout":"post","title":"Disqus On Github","_content":"\nI had some trouble getting disqus to work with my github page. Turns out I needed to add the following to my disqus javascript:\n\n`\nvar disqus_url = 'http://gflarity.github.com{{ page.url }}';\n`\n\nNow it all works like a charm. \n\nThanks to [http://davidwinter.me/articles/2011/10/29/setting-up-github-pages/](http://davidwinter.me/articles/2011/10/29/setting-up-github-pages/).\n\n","source":"_posts/2012-03-18-disqus-on-github.md","raw":"---\ndate: 2012-03-18\nlayout: post\ntitle: Disqus On Github\ncategories:\n- blog\n---\n\nI had some trouble getting disqus to work with my github page. Turns out I needed to add the following to my disqus javascript:\n\n`\nvar disqus_url = 'http://gflarity.github.com{{ page.url }}';\n`\n\nNow it all works like a charm. \n\nThanks to [http://davidwinter.me/articles/2011/10/29/setting-up-github-pages/](http://davidwinter.me/articles/2011/10/29/setting-up-github-pages/).\n\n","slug":"disqus-on-github","published":1,"updated":"2016-02-27T21:29:10.000Z","comments":1,"photos":[],"link":"","_id":"cil5nk7na000dotuf70ij6n71"}],"PostAsset":[],"PostCategory":[{"post_id":"cil5nk7mh0000otuf086gn15o","category_id":"cil5nk7mn0001otuf2ax2qjhq","_id":"cil5nk7mp0002otufsnb9rx6u"},{"post_id":"cil5nk7n10005otufza8bgp6c","category_id":"cil5nk7mn0001otuf2ax2qjhq","_id":"cil5nk7n20006otufsmd5htax"},{"post_id":"cil5nk7n40007otufycxg385o","category_id":"cil5nk7mn0001otuf2ax2qjhq","_id":"cil5nk7n40008otuf0o6f7sfg"},{"post_id":"cil5nk7n60009otuf5dtf7214","category_id":"cil5nk7mn0001otuf2ax2qjhq","_id":"cil5nk7n6000aotufwltvdy60"},{"post_id":"cil5nk7n7000botuf9oitr0iv","category_id":"cil5nk7mn0001otuf2ax2qjhq","_id":"cil5nk7n8000cotufq66wtxpn"},{"post_id":"cil5nk7na000dotuf70ij6n71","category_id":"cil5nk7mn0001otuf2ax2qjhq","_id":"cil5nk7na000eotufkxa5hr0k"}],"PostTag":[],"Tag":[]}}